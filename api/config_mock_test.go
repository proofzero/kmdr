// Code generated by MockGen. DO NOT EDIT.
// Source: ./api/config.go

// Package mock_api is a generated GoMock package.
package api

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockConfigAPI is a mock of ConfigAPI interface.
type MockConfigAPI struct {
	ctrl     *gomock.Controller
	recorder *MockConfigAPIMockRecorder
}

// MockConfigAPIMockRecorder is the mock recorder for MockConfigAPI.
type MockConfigAPIMockRecorder struct {
	mock *MockConfigAPI
}

// NewMockConfigAPI creates a new mock instance.
func NewMockConfigAPI(ctrl *gomock.Controller) *MockConfigAPI {
	mock := &MockConfigAPI{ctrl: ctrl}
	mock.recorder = &MockConfigAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigAPI) EXPECT() *MockConfigAPIMockRecorder {
	return m.recorder
}

// AddContext mocks base method.
func (m *MockConfigAPI) AddContext(context string, isDefault ...bool) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{context}
	for _, a := range isDefault {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddContext indicates an expected call of AddContext.
func (mr *MockConfigAPIMockRecorder) AddContext(context interface{}, isDefault ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{context}, isDefault...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddContext", reflect.TypeOf((*MockConfigAPI)(nil).AddContext), varargs...)
}

// AddUser mocks base method.
func (m *MockConfigAPI) AddUser(user string, isDefault ...bool) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{user}
	for _, a := range isDefault {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddUser", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUser indicates an expected call of AddUser.
func (mr *MockConfigAPIMockRecorder) AddUser(user interface{}, isDefault ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{user}, isDefault...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockConfigAPI)(nil).AddUser), varargs...)
}

// Commit mocks base method.
func (m *MockConfigAPI) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockConfigAPIMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockConfigAPI)(nil).Commit))
}

// InitConfig mocks base method.
func (m *MockConfigAPI) InitConfig() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitConfig")
	ret0, _ := ret[0].(error)
	return ret0
}

// InitConfig indicates an expected call of InitConfig.
func (mr *MockConfigAPIMockRecorder) InitConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitConfig", reflect.TypeOf((*MockConfigAPI)(nil).InitConfig))
}

// RemoveContext mocks base method.
func (m *MockConfigAPI) RemoveContext(context string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveContext", context)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveContext indicates an expected call of RemoveContext.
func (mr *MockConfigAPIMockRecorder) RemoveContext(context interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveContext", reflect.TypeOf((*MockConfigAPI)(nil).RemoveContext), context)
}

// RemoveUser mocks base method.
func (m *MockConfigAPI) RemoveUser(user string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUser indicates an expected call of RemoveUser.
func (mr *MockConfigAPIMockRecorder) RemoveUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUser", reflect.TypeOf((*MockConfigAPI)(nil).RemoveUser), user)
}

// SetDefaultContext mocks base method.
func (m *MockConfigAPI) SetDefaultContext(context string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDefaultContext", context)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDefaultContext indicates an expected call of SetDefaultContext.
func (mr *MockConfigAPIMockRecorder) SetDefaultContext(context interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDefaultContext", reflect.TypeOf((*MockConfigAPI)(nil).SetDefaultContext), context)
}

// SetDefaultUser mocks base method.
func (m *MockConfigAPI) SetDefaultUser(user string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDefaultUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDefaultUser indicates an expected call of SetDefaultUser.
func (mr *MockConfigAPIMockRecorder) SetDefaultUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDefaultUser", reflect.TypeOf((*MockConfigAPI)(nil).SetDefaultUser), user)
}
